{"ast":null,"code":"var _jsxFileName = \"/Users/iclear/Desktop/Univ/club/likelion/homework/Taejin-Kim/week11/src/components/user/UserFilter.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { filterType } from '../../constants/filtertype';\nimport { getGenderUser, getPerPage, getPartUser } from '../../apis/userlist';\n\n//얘가 api 호출함\n// {} 언에 있는 것들이 각각의 props\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserFilter = ({\n  setFilter,\n  setUserData,\n  setCurPage\n}) => {\n  // 필터 각각에 대해 param이 존재.\n  // 따라서 type, param을 전달해줌\n  const handleClick = async (type, param) => {\n    if (type === \"all\") {\n      //response가 axios이니까 await 써줘야 함 - 따라서 async를 꼭 써줘야 함(한 쌍임) -> 이 결과로 위에 async(type, param) 이렇게 된 것.\n      const response = await getPerPage(1);\n      //response값을 저장하기 위해서 새로운 상태(state)가 필요하다!\n      //useState를 이용해서 이 값을 저장해주도록 합시다~~\n      setUserData(response);\n      // console.log(response);\n      setCurPage(1);\n    } else if (type === \"gender\") {\n      const response = await getGenderUser(param);\n      setUserData(response);\n      // console.log(response);\n\n      // 현재 페이지를 초기화하는 로직 - 현재 페이지를 1로 초기화해줌\n      setCurPage(1);\n    } else if (type === \"part\") {\n      const response = await getPartUser(param);\n      setUserData(response);\n      console.log(response);\n      setCurPage(1);\n    }\n    setFilter(param); //다른 값으로도 변경 가능~  // 색상 변경 할때 이거 이용하기.\n  };\n  return (\n    /*#__PURE__*/\n    // FilterBox 여러개 복붙할 수도 있지만 이러면 보기 싫으니까 map함수를 이용해서 깔끔하게 해줌\n    // .map(data, idx) => 이걸 통해 데이터와 데이터의 순서를 보내게 됨\n    // FilterBox 내부에는 {data.title}이 들어가야 표현됨 -> data가 filterType\n    // FilterBox가 onClick 된 경우의 동작 -> handleClick함수\n    // 이때 함수는 반드시 return 문 위에 작성해야 함.\n    _jsxDEV(FilterLayout, {\n      children: filterType.map((data, idx) => /*#__PURE__*/_jsxDEV(FilterBox, {\n        onClick: () => handleClick(data.type, data.param),\n        children: data.title\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = UserFilter;\nexport default UserFilter;\n\n//styled-component\nconst FilterLayout = styled.div`\n    display: flex;\n    width: 90%;\n    justify-content: space-between;\n    overflow-x: scroll;\n    padding-left: 2rem;\n    padding-right: 2rem;\n    margin-top: 2rem;\n    // 여기 해당 css의 자식컴포넌트들 사이의 간격 의미 - gap\n    gap: 2rem;\n    // 스크롤바 없애는 코드\n    &::-webkit-scrollbar{\n        display: none;\n    }\n`;\n\n// 필터 각각의 박스(전체, 남, 여 ...)\n_c2 = FilterLayout;\nconst FilterBox = styled.div`\n    display: flex;\n    padding: 1rem 4rem 1rem 4rem;\n    background-color: \"#C9C9C9\";\n    border-radius: 1rem;\n    font-size: 3rem;\n    // 크기를 옆으로 줄일때 강제 줄바꿈 안되도록 제한하는 것 - white-space\n    white-space: nowrap;\n    //마우스를 위에 올렸을때 반응 - hover\n    &:hover{\n        cursor: pointer;\n        color: white;\n    }\n`;\n_c3 = FilterBox;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"UserFilter\");\n$RefreshReg$(_c2, \"FilterLayout\");\n$RefreshReg$(_c3, \"FilterBox\");","map":{"version":3,"names":["React","styled","filterType","getGenderUser","getPerPage","getPartUser","jsxDEV","_jsxDEV","UserFilter","setFilter","setUserData","setCurPage","handleClick","type","param","response","console","log","FilterLayout","children","map","data","idx","FilterBox","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","div","_c2","_c3","$RefreshReg$"],"sources":["/Users/iclear/Desktop/Univ/club/likelion/homework/Taejin-Kim/week11/src/components/user/UserFilter.js"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { filterType } from '../../constants/filtertype'\nimport { getGenderUser, getPerPage, getPartUser } from '../../apis/userlist'\n\n\n//얘가 api 호출함\n// {} 언에 있는 것들이 각각의 props\nconst UserFilter = ({setFilter, setUserData, setCurPage}) => {\n    // 필터 각각에 대해 param이 존재.\n    // 따라서 type, param을 전달해줌\n    const handleClick = async(type, param) => {\n        if(type === \"all\"){\n            //response가 axios이니까 await 써줘야 함 - 따라서 async를 꼭 써줘야 함(한 쌍임) -> 이 결과로 위에 async(type, param) 이렇게 된 것.\n            const response = await getPerPage(1);\n            //response값을 저장하기 위해서 새로운 상태(state)가 필요하다!\n            //useState를 이용해서 이 값을 저장해주도록 합시다~~\n            setUserData(response);\n            // console.log(response);\n            setCurPage(1);\n        } else if (type === \"gender\"){\n            const response = await getGenderUser(param);\n            setUserData(response);\n            // console.log(response);\n\n            // 현재 페이지를 초기화하는 로직 - 현재 페이지를 1로 초기화해줌\n            setCurPage(1);\n        } else if (type === \"part\"){\n            const response = await getPartUser(param);\n            setUserData(response);\n            console.log(response);\n\n            setCurPage(1);\n        }\n\n\n        setFilter(param); //다른 값으로도 변경 가능~  // 색상 변경 할때 이거 이용하기.\n    }\n  return (\n    // FilterBox 여러개 복붙할 수도 있지만 이러면 보기 싫으니까 map함수를 이용해서 깔끔하게 해줌\n    // .map(data, idx) => 이걸 통해 데이터와 데이터의 순서를 보내게 됨\n    // FilterBox 내부에는 {data.title}이 들어가야 표현됨 -> data가 filterType\n    // FilterBox가 onClick 된 경우의 동작 -> handleClick함수\n    // 이때 함수는 반드시 return 문 위에 작성해야 함.\n    <FilterLayout>{filterType.map(\n        (data, idx) => \n        <FilterBox\n        key={idx}\n        onClick={() => handleClick(data.type, data.param)}>{data.title}</FilterBox>\n    )}</FilterLayout>\n  )\n}\n\nexport default UserFilter\n\n\n//styled-component\nconst FilterLayout = styled.div`\n    display: flex;\n    width: 90%;\n    justify-content: space-between;\n    overflow-x: scroll;\n    padding-left: 2rem;\n    padding-right: 2rem;\n    margin-top: 2rem;\n    // 여기 해당 css의 자식컴포넌트들 사이의 간격 의미 - gap\n    gap: 2rem;\n    // 스크롤바 없애는 코드\n    &::-webkit-scrollbar{\n        display: none;\n    }\n`\n\n// 필터 각각의 박스(전체, 남, 여 ...)\nconst FilterBox = styled.div`\n    display: flex;\n    padding: 1rem 4rem 1rem 4rem;\n    background-color: \"#C9C9C9\";\n    border-radius: 1rem;\n    font-size: 3rem;\n    // 크기를 옆으로 줄일때 강제 줄바꿈 안되도록 제한하는 것 - white-space\n    white-space: nowrap;\n    //마우스를 위에 올렸을때 반응 - hover\n    &:hover{\n        cursor: pointer;\n        color: white;\n    }\n`"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,UAAU,QAAQ,4BAA4B;AACvD,SAASC,aAAa,EAAEC,UAAU,EAAEC,WAAW,QAAQ,qBAAqB;;AAG5E;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAGA,CAAC;EAACC,SAAS;EAAEC,WAAW;EAAEC;AAAU,CAAC,KAAK;EACzD;EACA;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAMC,IAAI,EAAEC,KAAK,KAAK;IACtC,IAAGD,IAAI,KAAK,KAAK,EAAC;MACd;MACA,MAAME,QAAQ,GAAG,MAAMX,UAAU,CAAC,CAAC,CAAC;MACpC;MACA;MACAM,WAAW,CAACK,QAAQ,CAAC;MACrB;MACAJ,UAAU,CAAC,CAAC,CAAC;IACjB,CAAC,MAAM,IAAIE,IAAI,KAAK,QAAQ,EAAC;MACzB,MAAME,QAAQ,GAAG,MAAMZ,aAAa,CAACW,KAAK,CAAC;MAC3CJ,WAAW,CAACK,QAAQ,CAAC;MACrB;;MAEA;MACAJ,UAAU,CAAC,CAAC,CAAC;IACjB,CAAC,MAAM,IAAIE,IAAI,KAAK,MAAM,EAAC;MACvB,MAAME,QAAQ,GAAG,MAAMV,WAAW,CAACS,KAAK,CAAC;MACzCJ,WAAW,CAACK,QAAQ,CAAC;MACrBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MAErBJ,UAAU,CAAC,CAAC,CAAC;IACjB;IAGAF,SAAS,CAACK,KAAK,CAAC,CAAC,CAAC;EACtB,CAAC;EACH;IAAA;IACE;IACA;IACA;IACA;IACA;IACAP,OAAA,CAACW,YAAY;MAAAC,QAAA,EAAEjB,UAAU,CAACkB,GAAG,CACzB,CAACC,IAAI,EAAEC,GAAG,kBACVf,OAAA,CAACgB,SAAS;QAEVC,OAAO,EAAEA,CAAA,KAAMZ,WAAW,CAACS,IAAI,CAACR,IAAI,EAAEQ,IAAI,CAACP,KAAK,CAAE;QAAAK,QAAA,EAAEE,IAAI,CAACI;MAAK,GADzDH,GAAG;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACkE,CAC9E;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe;EAAC;AAErB,CAAC;AAAAC,EAAA,GA3CKtB,UAAU;AA6ChB,eAAeA,UAAU;;AAGzB;AACA,MAAMU,YAAY,GAAGjB,MAAM,CAAC8B,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GAhBMd,YAAY;AAiBlB,MAAMK,SAAS,GAAGtB,MAAM,CAAC8B,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAAE,GAAA,GAbKV,SAAS;AAAA,IAAAO,EAAA,EAAAE,GAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAF,GAAA;AAAAE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}